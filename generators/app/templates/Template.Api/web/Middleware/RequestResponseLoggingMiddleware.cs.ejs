using Template.Common.Attributes;
using Template.Core.Models;
using Template.Core.Services;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

namespace <%= name %>.Api.web.Middleware
{
    public class RequestResponseLoggingMiddleware
    {
        private readonly RequestDelegate _next;


        public RequestResponseLoggingMiddleware(RequestDelegate next)
        {
            _next = next;

        }

        public async Task Invoke(HttpContext context, IServiceProvider serviceProvider)
        {



            Endpoint endpoint = context.Request.HttpContext.GetEndpoint();
            if (endpoint != null)
            {
                LoggerAttribute filter = endpoint.Metadata.GetMetadata<LoggerAttribute>();
                if (filter == null)
                {
                    await _next(context);
                    return;
                }
                else
                {
                    string RequestBody = await getRequestBody(context.Request);
                    //Copy a pointer to the original response body stream
                    var originalBodyStream = context.Response.Body;

                    //Create a new memory stream...
                    using (var responseBody = new MemoryStream())
                    {
                        //...and use that for the temporary response body
                        context.Response.Body = responseBody;

                        //Continue down the Middleware pipeline, eventually returning to this class


                        await _next(context);

                        var response = await FormatResponse(context.Response);

                        //TODO: Save log to chosen datastore

                        //Copy the contents of the new memory stream (which contains the response) to the original stream, which is then returned to the client.
                        await responseBody.CopyToAsync(originalBodyStream);
                        // Endpoint endpoint = context.Request.HttpContext.GetEndpoint();
                        //if (endpoint != null)
                        {
                            //  LoggerAttribute filter = endpoint.Metadata.GetMetadata<LoggerAttribute>();
                            if (filter != null)
                            {
                                using (var scope = serviceProvider.CreateScope())
                                {
                                    // Resolve the Scoped service
                                    var logService = scope.ServiceProvider.GetService<ILogService>();
                                    var Log = FormatRequest(context.Request);
                                    Log.IP = GetClientIp(context);
                                    Log.StatusCode = response.StatusCode;
                                    Log.ResponseBody = response.Body;
                                    Log.RequestBody = RequestBody;
                                    await logService.log(Log);



                                }



                            }
                        }
                    }
                }
            }
            else
            {
                await _next(context);
                return;
            }



        }

        private Log FormatRequest(HttpRequest request)
        {
            Log log = new Log();
            var currentUser = request.HttpContext.User;
            string controller = request.RouteValues["controller"].ToString();
            string action = request.RouteValues["action"].ToString();


            log.Action = action;
            log.Controller = controller;
            if (currentUser.Identity.IsAuthenticated)
            {
                log.ApplicationId = currentUser.GetUserApplicatiopnId();
                log.CreatorUserId = currentUser.GetUserId();
                log.TenantID = currentUser.GetUserTenantId();
            }




            log.Host = request.Host.ToString();
            log.QueryString = request.QueryString.ToString();
            //log.RequestBody = bodyAsText;
            log.Path = request.Path.ToString();
            return log; //$"{request.Scheme} {request.Host}{request.Path} {request.QueryString} {bodyAsText}";
        }

        private async Task<Reponse> FormatResponse(HttpResponse response)
        {
            //We need to read the response stream from the beginning...
            response.Body.Seek(0, SeekOrigin.Begin);

            //...and copy it into a string
            string text = await new StreamReader(response.Body).ReadToEndAsync();

            //We need to reset the reader for the response so that the client can read it.
            response.Body.Seek(0, SeekOrigin.Begin);

            //Return the string for the response, including the status code (e.g. 200, 404, 401, etc.)
            return new Reponse() { Body = text, StatusCode = response.StatusCode };
        }

        private string GetClientIp(HttpContext context)
        {
            return context.Connection.RemoteIpAddress.ToString();
        }

        private class Reponse
        {
            public string Body { get; set; }
            public int StatusCode { get; set; }
        }

        private async Task<string> getRequestBody(HttpRequest request)
        {



            request.EnableBuffering();

            // Leave the body open so the next middleware can read it.
            using (var reader = new StreamReader(
                request.Body,
                encoding: Encoding.UTF8,
                detectEncodingFromByteOrderMarks: false,
                bufferSize: 1024,
                leaveOpen: true))
            {
                var body = await reader.ReadToEndAsync();
                // Do some processing with body…

                // Reset the request body stream position so the next middleware can read it
                request.Body.Position = 0;
                return body;
            }

            //var body = request.Body;

            ////This line allows us to set the reader for the request back at the beginning of its stream.
            // request.EnableRewind();


            ////We now need to read the request stream.  First, we create a new byte[] with the same length as the request stream...
            //var buffer = new byte[Convert.ToInt32(request.ContentLength)];

            ////...Then we copy the entire request stream into the new buffer.
            //await request.Body.ReadAsync(buffer, 0, buffer.Length);

            ////We convert the byte[] into a string using UTF8 encoding...
            //var bodyAsText = Encoding.UTF8.GetString(buffer);

            ////..and finally, assign the read body back to the request body, which is allowed because of EnableRewind()
            //request.Body = body;
            //return bodyAsText;
        }

    }


}