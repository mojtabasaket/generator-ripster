using <%= name %>.Api.Core.Pagination;
using <%= name %>.Common.Attributes;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace <%= name %>.Api.Core.Infrastructure
{
    public static class WebConfiguration
    {
        public static IServiceCollection AddWebModule(this IServiceCollection @this, IHostingEnvironment environment)
        {
            @this.AddHttpContextAccessor();
            @this.AddHealthChecks();
            @this.AddControllers(options => { options.ModelBinderProviders.Insert(0, new PageableBinderProvider()); })
             .AddNewtonsoftJson(op => {
                 op.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;
                 op.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter());
             });


            var TypesToRegister = Assembly.Load("Template.Service")
            .GetTypes()
            .Where(x => x.GetCustomAttributes(typeof(BeanAttribute), false).Length > 0)
            .ToList();

            TypesToRegister.AddRange(Assembly.Load("Template.Data")
            .GetTypes()
            .Where(x => x.GetCustomAttributes(typeof(BeanAttribute), false).Length > 0)
            .ToList());
            new Template.Api.Core.DependencyInjection.ServiceCollection(TypesToRegister, @this,environment).addServiceDescriptors();
         

            return @this;
        }
        public static IApplicationBuilder UseApplicationWeb(this IApplicationBuilder @this, IWebHostEnvironment env)
        {
            @this.UseDefaultFiles();
            @this.UseStaticFiles();

            @this.UseRouting();
          
            return @this;
        }
    }
}
